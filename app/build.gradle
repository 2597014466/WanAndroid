apply plugin: 'com.android.application'

android {
    signingConfigs {
        config {
            keyAlias 'senon'
            keyPassword '123456'
            storeFile file('../senon.jks')
            storePassword '123456'
        }
    }

    compileSdkVersion rootProject.ext.android["compileSdkVersion"]

    defaultConfig {
        applicationId "com.senon.xfhmoudel"

        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    aaptOptions {
        cruncherEnabled = false
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    testImplementation rootProject.ext.dependencies["junit"]



    if (isBuildModule.toBoolean()) {
        implementation project(':lib_common')
    } else {
        implementation project(':module_home')
        implementation project(':module_life')
        implementation project(':module_art')
        implementation project(':module_talent')
    }
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]
    annotationProcessor rootProject.ext.dependencies["router-compiler"]
}
